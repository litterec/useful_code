/*  Software Name: Rasolo Wish Compare  Software URI: http://  Description: The Wordpress addition. It allows to maintain both the compare and "wish lists  Version: 1.0  Author: Andrew Galagan  Author URI: http://galagan.ra-solo.ru/?showitem=6&lang=eng *//*  Copyright 2018  Andrew Galagan  (email: andrew.galagan@gmail.com)  This program is free software; you can redistribute it and/or modify  it under the terms of the GNU General Public License as published by  the Free Software Foundation; either version 2 of the License, or  (at your option) any later version.  This program is distributed in the hope that it will be useful,  but WITHOUT ANY WARRANTY; without even the implied warranty of  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  GNU General Public License for more details.  You should have received a copy of the GNU General Public License  along with this program; if not, write to the Free Software  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA */// This is the same as usual class =============================var RasoloWishCompare=function ()       {var isset=function ()       {var a=arguments, l=a.length, i=0;if (l===0) {    throw new Error('Empty isset');}while (i!==l) {    if (typeof(a[i])=='undefined' || a[i]===null) {        return false;    } else {        i++;    }}return true;        }  // The end of issetvar wish_ids=[];var cmpr_ids=[];var error_code=false;var error_msg=false;var hasbeenread=false;var hasbeenwritten=false;var max_wish_cpcty=10;if(isset(rasolo_params.wish_max)){    max_wish_cpcty=rasolo_params.wish_max;}var max_cmpr_cpcty=12;if(isset(rasolo_params.cmpr_max)){    max_cmpr_cpcty=rasolo_params.cmpr_max;}var local_cookie_key='';if(isset(rasolo_params.cookie_key)){    local_cookie_key=rasolo_params.cookie_key;};function in_array(needle, haystack, strict = false)       {var found = false, key, strict = !!strict;for (key in haystack) {if ((strict && haystack[key] === needle) || (!strict && haystack[key] == needle)) {found = true;break;}}return found;       } // The end of in_arrayfunction set_error(code,txt)       {error_code=code;error_msg=txt;console.log('Error # '+code+': '+txt);       } // The end of set_errorfunction reset_error()       {error_code=false;error_msg=false;       } // The end of set_errorfunction set_my_cookie(name, value, options)       {options = options || {};var expires = options.expires;if (typeof expires == "number" && expires) {var d = new Date();d.setTime(d.getTime() + expires * 1000);expires = options.expires = d;}if (expires && expires.toUTCString) {options.expires = expires.toUTCString();}value = encodeURIComponent(value);var updatedCookie = name + "=" + value;for (var propName in options) {updatedCookie += "; " + propName;var propValue = options[propName];if (propValue !== true) {  updatedCookie += "=" + propValue;}}//console.log('updatedCookie:'+updatedCookie);document.cookie = updatedCookie;       }  // The end of set_my_cookiefunction get_my_cookie(name)       {var nameEQ = name + "=";var ca = document.cookie.split(';');for(var i=0;i < ca.length;i++) {    var c = ca[i];    while (c.charAt(0)==' ') c = c.substring(1,c.length);    if (c.indexOf(nameEQ) == 0) {      var val_to_return=c.substring(nameEQ.length,c.length);      return decodeURIComponent(val_to_return);    }}return null;       }  // The end of get_my_cookiefunction eraseCookie(name)       {set_my_cookie(name,"",-1);       }  // The end of eraseCookie//eraseCookie(local_cookie_key);//           return;function read_user_cookie()       {hasbeenread=true;var usr_cookie_encoded=get_my_cookie(local_cookie_key);//console.log('read_user_cookie *** usr_cookie_encoded='+usr_cookie_encoded+'{== '+typeof usr_cookie_encoded);//var usr_array=[];if(!isset(usr_cookie_encoded)){//    console.log('read_user_cookie *** The user cookies are empty');    set_error(2001,'The user cookies are empty');    wish_ids=[];    cmpr_ids=[];    var output_empty_jsn_encoded=JSON.stringify({'wish_ids':[],'cmpr_ids':[]});    set_my_cookie(local_cookie_key, output_empty_jsn_encoded, {        expires: 3600*24*7,        path: '/',        domain: document.location.hostname    });    return false}var usr_array_local=[];try {    usr_array_local=JSON.parse(usr_cookie_encoded);} catch (_error) {    wish_ids=[];    cmpr_ids=[];    console.log('Error 2002!!!!!!!!!!');    set_error(2002,'The user cookies are corrupt');    var output_jsn_crrpt_encoded=JSON.stringify({'wish_ids':wish_ids,'cmpr_ids':cmpr_ids});    console.log('output_jsn_encoded:'+output_jsn_crrpt_encoded)    set_my_cookie(local_cookie_key, output_jsn_crrpt_encoded, {        expires: 3600*24*7,        path: '/',        domain: document.location.hostname    });    return false;}//                console.log(prod_id);//console.log('read_user_cookie *** Before null berification');if(usr_array_local==null){    wish_ids=[];    cmpr_ids=[];    set_error(2003,'The user cookies are empty');    return false;}//console.log('read_user_cookie *** Before total success');var total_success=true;if(!isset(usr_array_local['wish_ids'])){    wish_ids=[];    console.log('Error 2004!!!!!!!!!!');    set_error(2004,'The wish ids are empty');    total_success=false;} else {    wish_ids=usr_array_local['wish_ids'];}if(!isset(usr_array_local['cmpr_ids'])){//    console.log('read_user_cookie *** usr_array_local does not exist');    cmpr_ids=[];    set_error(2014,'The cmpr ids are empty');    total_success=false;} else {//    console.log('read_user_cookie *** usr_array_local does exist');    cmpr_ids=usr_array_local['cmpr_ids'];}return total_success;       } // The end of read_user_cookie//console.log('before read_user_cookie 01');var read_cookie_rc=read_user_cookie();//console.log('after read_user_cookie 01, read_cookie_rc='+read_cookie_rc+' cmpr_ids:');//console.log(cmpr_ids);return {    get_wish:function(){        if(hasbeenread){            return wish_ids;        }        set_error(4031,'The user data such as wish array have not been read so far')        return false;    }, // The end of get_wish    get_cmpr:function(){       if(hasbeenread){            return cmpr_ids;        }        set_error(4032,'The user data such as cmpr array have not been read so far')        return false;    }, // The end of get_cmpr    get_error_msg:function(){        return error_msg;    }, // The end of get_error_msg    get_error_code:function(){        return error_code;    }, // The end of get_error_code    add_wish:function(wish_item_for_array){        var item_to_add=parseInt(wish_item_for_array);        if(item_to_add<=0){            set_error(502,'The source data for addition to wish array is incorrect');            return false;        }//        var dbg_in_arr=in_array(wish_item_for_array,wish_ids);//        console.log('___debug_in_array='+dbg_in_arr);//        console.log('wish_item_for_array='+wish_item_for_array);//        console.log('wish_ids:');//        console.log(wish_ids);        if(in_array(wish_item_for_array,wish_ids)){            set_error(503,'This wish product # '+wish_item_for_array+' is already in the list');            return false;        } else {            if(wish_ids.length<rasolo_params.wish_max){                hasbeenwritten=false;//                console.log('We have changed hasbeenwritten to false!');                wish_ids.push(wish_item_for_array);                reset_error(false,'');                return true;            } else {                set_error(501,'The maximum of '+max_cmpr_cpcty+' wish items exceeded (001)');                return false;            }        }    }, // The end of add_wish    remove_wish:function(rm_item_id_num){        if(!in_array(rm_item_id_num,wish_ids)){            set_error(802,'The item to be deleted has been not found in the wish array')            return false;        }        for(var i = wish_ids.length - 1; i >= 0; i--) {            if(parseInt( wish_ids[i]) == parseInt(rm_item_id_num)) {               wish_ids.splice(i, 1);               reset_error();               return true;            }        }        set_error(803,'The item to be deleted has been not found twice in the wish array')        return false;    }, // The end of remove_wish    remove_cmpr:function(rm_item_id_num){        if(!in_array(rm_item_id_num,cmpr_ids)){//            console.log('debug! rm_item_id_num='+rm_item_id_num);            set_error(805,'The item to be deleted has been not found in the cmpr array')            return false;        }        for(var i = cmpr_ids.length - 1; i >= 0; i--) {            if(parseInt( cmpr_ids[i]) == parseInt(rm_item_id_num)) {               cmpr_ids.splice(i, 1);               reset_error();               return true;            }        }        set_error(803,'The item to be deleted has been not found twice in the cmpr array')        return false;    }, // The end of remove_cmpr    add_cmpr:function(cmpr_item_for_array){        var item_to_add=parseInt(cmpr_item_for_array);        if(item_to_add<=0){            set_error(502,'The source data for addition to cmpr array is incorrect');            return false;        }        if(in_array(cmpr_item_for_array,cmpr_ids)){            set_error(501,'The maximum of '+rasolo_params.cmpr_max+' cmpr items exceeded (002)');            return false;        } else {            if(cmpr_ids.length<rasolo_params.cmpr_max){                console.log('cmpr_ids before push');                console.log(cmpr_ids);                cmpr_ids.push(cmpr_item_for_array);                console.log('cmpr_ids after push');                console.log(cmpr_ids);                hasbeenwritten=false;                set_error(false,'');                return true;            } else {                set_error(501,'The maximum of '+rasolo_params.cmpr_max+' items exceeded (003)');                return false;            }        }    },  // The end of add_cmpr    write_cookies:function(){            hasbeenwritten=true;            reset_error();            var output_jsn_encoded=JSON.stringify({'wish_ids':wish_ids,'cmpr_ids':cmpr_ids});            set_my_cookie(local_cookie_key, output_jsn_encoded, {                expires: 3600*24*7,                path: '/',                domain: document.location.hostname            });        return false;    }, // The end of write_cookies    get_options:function(){        return {                   wish_cpcty: max_wish_cpcty,                   cmpr_cpcty: max_cmpr_cpcty,                   cookie_key: local_cookie_key               }    }}       }; // The end of RasoloWishCompare// The end of so called class ====================================